/*
 *  Write a function that takes in a non-empty 
 *  array of distinct integers and an integer representing a target sum. 
 *  The function should find all triplets in the array that sum up to the 
 *  target sum and return a two-dimensional array of all these triplets. 
 *  The numbers in each triplet should be ordered in ascending order, and the 
 *  triplets themselves should be ordered in ascending order with respect to the 
 *  numbers they hold. If no three numbers sum up to the target sum, the function 
 *  should return an empty array
 */

import java.util.*;

public class Program2 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter array size:");
		int n = sc.nextInt();
		ArrayList<Integer> list = new ArrayList<Integer>(n);
		for(int i=0; i<n; i++) {
			System.out.println("Enter element:");
			list.add(sc.nextInt());
		}
		System.out.println("Enter target sum:");
		int targetSum = sc.nextInt();
		ArrayList<ArrayList<Integer>> ans = findTriplets(list, targetSum);
		for(int i=0; i<ans.size(); i++) {
			Collections.sort(ans.get(i)); // Sorting each triplet
		}
		System.out.println(ans);
		sc.close();
	}
	
	static ArrayList<ArrayList<Integer>> findTriplets(ArrayList<Integer> list, int targetSum){
		ArrayList<ArrayList<Integer>> results = new ArrayList<ArrayList<Integer>>(); // Two dimensional array to hold the triplets
		int n = list.size();
		if(n>=3) { // The array size should be greater than 3
			for(int i=0; i<n-2; i++) {
				if((list.get(i) + list.get(i+1) + list.get(i+2)) == targetSum) { // Triplet found
					results.add(new ArrayList<Integer>(Arrays.asList(list.get(i), list.get(i+1), list.get(i+2))));
				}
			}
		}
		return results;
	}
}
